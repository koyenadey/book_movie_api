// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  seed = "prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

enum Categories{
  UA
  A
  KIDS
}

enum CastRoles{
  Actor
  Musician
  Producer
  Director
}

enum MemberRoles{
  Customer
  Admin
}

enum SeatClass{
  GOLD
  PLATINUM
  SILVER
  BALCONY
  RECLINER
  PREMIUM
  ECONOMY
}

enum SnackCategories{
  BITES
  BEVERAGES
  DESSERT
  COMBO
  POPCORN
}

enum SnackTypes{
  VEG
  NON_VEG
}



model movie{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  description String
  category Categories
  rating Float
  duration String
  release_date DateTime
  expiring_date DateTime
  price Float
  thumbnail String
  coverurl String
  languages movie_language[]
  theatres movie_theatre[] 
  casts movie_cast[]
  bookings booking[]
  genres movie_genre[]
  pictureQualites movie_picturequality[]
	
}

model movie_genre{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movieId String? @db.Uuid
  movie movie? @relation(fields: [movieId],references: [id],onDelete: SetNull)
  genreId String? @db.Uuid
  genre genre? @relation(fields: [genreId],references: [id],onDelete: SetNull)

  @@unique([movieId,genreId])
	
}

model genre{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String @unique
  movies movie_genre[]
}

model movie_theatre{
  id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  theatreId String? @db.Uuid
  theatre theatre? @relation(fields: [theatreId],references: [id], onDelete: SetNull)
  movieId String? @db.Uuid
  movie movie? @relation(fields: [movieId],references: [id],onDelete: SetNull)
  screenId String @db.Uuid
  showTiming String

  @@unique([movieId,theatreId,screenId,showTiming])
}

model theatre{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  country String 
  city String
  location String 
  movies movie_theatre[] 
  bookings booking[]
  snacks snack[]
  screens screen[] 
}

model language{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String @unique
  code String @db.Char(2) //it follows ISO 639-1 language code
  movie movie_language[]
}

model movie_language{
  id String @id @default(uuid())
  movieId String? @db.Uuid
  movie movie? @relation(fields:[movieId],references:[id],onDelete: SetNull)
  languageId String? @db.Uuid
  language language? @relation(fields:[languageId],references: [id],onDelete: SetNull)

  @@unique([movieId,languageId])
}

model picturequality{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String @unique
  movies movie_picturequality[]
}

model movie_picturequality{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movieId String? @db.Uuid
  movie movie? @relation(fields: [movieId],references: [id],onDelete: SetNull)
  pictureQualityId String? @db.Uuid
  pictureQuality picturequality? @relation(fields: [pictureQualityId],references: [id],onDelete: SetNull)
}

model cast{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  imageUrl String
  movie movie_cast[] //relation
}

model movie_cast{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  castId String? @db.Uuid
  casts cast? @relation(fields: [castId],references: [id],onDelete: SetNull)
  movieId String? @db.Uuid
  movies movie? @relation(fields: [movieId],references: [id],onDelete: SetNull)
  role CastRoles

  @@unique([castId,movieId])
}

model member{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  email String @unique
  password String
  role MemberRoles
  bookings booking[]
}

model booking{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movieId String? @db.Uuid
  movie movie? @relation(fields: [movieId],references: [id],onDelete: SetNull)
  memberId String? @db.Uuid
  member member? @relation(fields: [memberId],references: [id],onDelete: SetNull)
  theatreId String? @db.Uuid // one booking will have only one theatre, but one theatre will have multiple bookings
  theatre theatre? @relation(fields: [theatreId],references: [id],onDelete: SetNull)
  bookingDate DateTime
  price Float
  showTiming String
  seats booking_seat[]
  snacks booking_snack[]
}
model screen{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String @unique
  capacity Int @db.SmallInt
  seatLayout String @db.Char(1)
  seats seat[]
  theatreId String? @db.Uuid // This screen belongs to so and so theatre
  theatre theatre? @relation(fields: [theatreId],references: [id],onDelete: SetNull)
}

model snack{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique
  weight Float
  price Float
  quantity Int
  categories SnackCategories
  type SnackTypes
  theatreId String? @db.Uuid
  theatre theatre? @relation(fields: [theatreId],references: [id],onDelete: SetNull)
  bookings booking_snack[]
}

model booking_snack{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId String? @db.Uuid
  bookings booking? @relation(fields: [bookingId],references: [id],onDelete: SetNull)
  snackId String? @db.Uuid
  qtyOrdered Int
  snacks snack? @relation(fields: [snackId],references: [id],onDelete: SetNull)
}

model booking_seat{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId String? @db.Uuid
  bookings booking? @relation(fields: [bookingId],references: [id], onDelete: SetNull)
  seatId String? @db.Uuid
  seats seat? @relation(fields: [seatId],references: [id],onDelete: SetNull)
  showTiming String

  @@unique([seatId,showTiming])
}
model seat{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  row Int
  section SeatClass
  seatNumber String
  price Float
  screenId String? @db.Uuid
  bookings booking_seat[]
  screen screen? @relation(fields: [screenId],references: [id],onDelete: SetNull)
}